generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  username   String  @unique
  password   String
  teams      Team[]  @relation("UserTeams")
  ownedTeams Team[]  @relation("TeamOwner")
  hands      Hand[]  @relation("UserHands")  // The user owns these hands
}

model Team {
  id        String  @id @default(uuid())
  users     User[]  @relation("UserTeams")
  ownerId   String
  owner     User    @relation("TeamOwner", fields: [ownerId], references: [id])
}

model Player {
  id        Int      @id @default(autoincrement())
  username  String
  club_id   Int
  hands     Hand[]   @relation("PlayerHands")
}

model Hand {
  id            String       @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime
  gameType      String
  blinds        Json          // Will store smallBlind, bigBlind, and optional ante
  tableId       String
  clubId        Int
  maxSeats      Int
  buttonSeat    Int
  players       Player[]      @relation("PlayerHands") // Players participating in the hand
  events        HandEvent[]   @relation("HandEvents")  // List of events related to this hand
  ownerId       String        // Owner of the hand
  owner         User          @relation("UserHands", fields: [ownerId], references: [id])
}

model HandEvent {
  id        String       @id @default(uuid())
  handId    String
  hand      Hand         @relation("HandEvents", fields: [handId], references: [id])
  eventType String      
  eventData Json         // Will store event-specific data, like player actions, dealt cards, etc.
  playerActionEvent PlayerActionEvent?
  boardChangeEvent  BoardChangeEvent?
  uncalledBetEvent  UncalledBetEvent?
  dealtCardsEvent   DealtCardsEvent?
  showCardsEvent    ShowCardsEvent? 
}

model PlayerActionEvent {
  id           String  @id @default(uuid())
  playerId     Int
  actionType   String
  amount       Float
  isAllIn      Boolean
  eventId      String @unique
  handEvent    HandEvent @relation(fields: [eventId], references: [id])
}

model BoardChangeEvent {
  id           String  @id @default(uuid())
  changeType   String
  newBoard     String[]
  eventId      String @unique
  handEvent    HandEvent @relation(fields: [eventId], references: [id])
}

model UncalledBetEvent {
  id        String  @id @default(uuid())
  playerId  Int
  amount    Float
  eventId   String @unique
  handEvent HandEvent @relation(fields: [eventId], references: [id])
}

model DealtCardsEvent {
  id        String  @id @default(uuid())
  playerId  Int
  cards     String[]
  eventId   String @unique
  handEvent HandEvent @relation(fields: [eventId], references: [id])
}

model ShowCardsEvent {
  id        String  @id @default(uuid())
  playerId  Int
  cards     String[]
  eventId   String @unique
  handEvent HandEvent @relation(fields: [eventId], references: [id])
}
