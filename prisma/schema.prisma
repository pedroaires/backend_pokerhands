generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  username   String  @unique
  password   String
  teams      Team[]  @relation("UserTeams")
  ownedTeams Team[]  @relation("TeamOwner")
  hands      Hand[]  @relation("UserHands")  // The user owns these hands
  invitations Invitation[] @relation("InviteeInvitations")
}

model Team {
  id        String  @id @default(uuid())
  name      String  @unique
  users     User[]  @relation("UserTeams")
  ownerId   String
  owner     User    @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations Invitation[] @relation("TeamInvitations")
}

model Invitation {
  id        String        @id @default(uuid())
  team      Team          @relation("TeamInvitations", fields: [teamId], references: [id], onDelete: Cascade) 
  teamId    String
  invitee   User          @relation("InviteeInvitations", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviteeId String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime       @default(now())
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model Player {
  id        Int      @id @default(autoincrement())
  username  String
  clubId   Int
  hands     Hand[]   @relation("PlayerHands")
}

model Hand {
  id            String       @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime
  gameType      String
  blinds        Json          // Will store smallBlind, bigBlind, and optional ante
  tableId       String
  clubId        Int
  maxSeats      Int
  buttonSeat    Int
  players       Player[]      @relation("PlayerHands") // Players participating in the hand
  seatMapper    Json          // Maps player IDs to seat numbers and stacks
  events        HandEvent[] @relation("HandEvents")
  ownerId       String        // Owner of the hand
  owner         User          @relation("UserHands", fields: [ownerId], references: [id], onDelete: Cascade)

  totalPot      Float         
  rake          Float         
  boards        Json          
  heroCards     String[]
}

model HandEvent {
  id          String      @id @default(uuid())
  handId      String
  hand        Hand        @relation("HandEvents", fields: [handId], references: [id], onDelete: Cascade)
  eventType   String
  eventData   Json        // Store event-specific data here as JSON (player actions, board changes, etc.)
}